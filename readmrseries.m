%READMRSERIES reads MR series
%
% SYNOPSIS:
%  image_out = readmrseries()
%
% PARAMETERS:
%
% DEFAULTS:
%  filename = ''
%  format = ''
%
% NOTES:
%  Reads image formats according to function nilio_mrread.
%  Derived from READIM   Read grey-value image from file
%
%  To get a current list of file formats, use the function DIPIO_GETIMAGEREADFORMATS,
%  which also gives a short description of each format.
%
%  Color images will be converted to grey-value by this function. 

% _____________________________________________________________________
% (C) Copyright 1999-2002               Pattern Recognition Group
%     All rights reserved               Faculty of Applied Physics
%                                       Delft University of Technology
%                                       Lorentzweg 1
%                                       2628 CJ Delft
%                                       The Netherlands
%
% Cris Luengo, June 2000.
% 17 December 2001: Using MATLAB's IMREAD if dipIO cannot read the file.
% February 2002: removed static list of file formats.

% ______________________________________________________________________________
% (C) Copyright 2003                    Neuroimaging Laboratory
%     All rights reserved               Washington University School of Medicine 
%                                       4525 Scott Ave, Box 8225
%                                       St. Louis, MO  63110
%                                       USA
%
% John Lee, June 2003: Implemented basic functions for reading MR files
% generated by Siemens Magnetom Vision systems (SPI native format)



function image_out = readmrseries(varargin)

% __________
% parameters

% ______________
% define structs
montFrmts =  {'single','1x2','1x3','1x4','1x5','2x2','2x3','2x4','2x5','3x3','3x4','3x5','4x4','4x5'};
fileFrmts = [struct('name','','description','Any type'),dipio_getimagereadformats];
slices = struct('num2view',{0},...
		'max',{0},...
		'offset',{0});
times = struct('num2view',{0},...
	       'max',{0},...
	       'offset',{0},...
	       'stepsize',{1});
montage = struct('rows',{1},...
		 'cols',{1});
% use number only in vcnum
ptinfo = struct('dir',{''},...
		'vcnum',{0},... 
		'SPInum',{0},...
		'ser1',{0},...
		'ima1',{0},...
		'serLast',{0},...
		'imaLast',{0},...
		'separator',{'\'});
inparams = ...
    struct('name',       {'directory', ...
		    'vcnum', 'SPInum', 'ser1', 'ima1', 'serLast', 'imaLast', 'slices2view', 'sliceoffset', 'slicesmax', 'times2view', 'timeoffset', 'timesmax', 'montFrmt'},...
	   'description',{'Home Directory', ...
		    'VC-Number', 'SPI', '1st Series', '1st IMA', 'Last Series', 'Last IMA', '# of Slices', 'Slice Offset', 'Max Slices','# of Times', 'Time Offset', 'Max Times','Montage format'},...
	   'type',       {'string', ...
		    'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'array', 'option'},...
	   'dim_check',  { 0, ...
		     0,       0,       0,       0,       0,       0,       0,       0,       0,       0,       0,       0,       0},...
	   'range_check',{' ', ...
		    'N',     'N',     'N',     'N',     'N',     'N',     'N',     'N',     'N',     'N',     'N',     'N',      montFrmts},...
	   'required',   { 0, ...
		     1,       1,       1,       1,       1,       1,       0,       0,       0,       0,        0,       0,       0},...
	   'default',    {'C:\uwork\np287', ...
	 	    '',      '',      '',      '',      '',      '',...
		                                                           8,       0,       8,       80,       0,       80,      '2x4'});

outparams = ...
    struct('name',{'image_out'},...
	   'description',{'Output image'},...
	   'type',{'image'}...
	   );

d = struct('menu','File I/O',...
           'display','Read MR series',...
           'inparams',inparams,...
           'outparams',outparams...
          );

if nargin == 1
   s = varargin{1};
   if ischar(s) & strcmp(s,'DIP_GetParamList')
      image_out = d;
      return
   end
end

%%% aliases for elements in the 'format' list.
if nargin>=2 & ischar(varargin{2})
   if strcmpi(varargin{2},'tif')
      varargin{2} = 'tiff';
   end
end
%%%

try
   disp('try getparams...');
   [ptinfo.dir, ptinfo.vcnum, ptinfo.SPInum, ptinfo.ser1, ptinfo.ima1, ptinfo.serlast, ptinfo.imaLast, slices.num2view, slices.offset, slices.max, times.num2view, times.offset, times.max, montFrmt] = getparams(d, varargin{:});
   %%% ptinfo.separator 'vc' int2str(ptinfo.vcnum)
   filename = [ptinfo.dir ptinfo.separator ...
           int2str(ptinfo.SPInum) '-' int2str(ptinfo.ser1) '-' int2str(ptinfo.ima1) '.ima']

   switch montFrmt
    case '1x2'
     montage.rows = 1, montage.cols = 2     
    case '1x3'
     montage.rows = 1, montage.cols = 3
    case '1x4'
     montage.rows = 1, montage.cols = 4
    case '1x5'
     montage.rows = 1, montage.cols = 5
    case '2x2'
     montage.rows = 2, montage.cols = 2
    case '2x3'
     montage.rows = 2, montage.cols = 3
    case '2x4'
     montage.rows = 2, montage.cols = 4
    case '2x5'
     montage.rows = 2, montage.cols = 5
    case '3x3'
     montage.rows = 3, montage.cols = 3
    case '3x4'
     montage.rows = 3, montage.cols = 4
    case '3x5'
     montage.rows = 3, montage.cols = 5
    case '4x4'
     montage.rows = 4, montage.cols = 4  
    case '4x5'
     montage.rows = 4, montage.cols = 5     
    otherwise
     montage.rows = 1, montage.cols = 1
   end

catch
   if ~isempty(paramerror)
      error(paramerror)
   else
      error(firsterr)
   end
end

try
   disp('try nilio_mrseriesread......');
   ptinfo.serLast = 3;
   disp(['Last series# is '  int2str(ptinfo.serLast)]); 
   disp(['Last ima# is '     int2str(ptinfo.imaLast)]);
   image_out = nilio_mrseriesread(slices, times, montage, ptinfo);
catch
   error(firsterr)
end

if isempty(image_out) & isempty(fileparts(filename)) % The file name has
                                                     % no path.
   error('Under construction...');						     
						    
%    p = getimagefilepath;
%    for ii=1:length(p)
%       fname = fullfile(p{ii},filename);
%       try
%           disp('try alternative nilio_mrseriesread...');
%           ptinfo.file = fname;
%           image_out = nilio_mrseriesread(slices, times, montage, ptinfo);
%       catch
%           error(firsterr)
%       end
%       if ~isempty(image_out)
%           break;
%       end
%    end
end

if isempty(image_out)
   if ~isempty(format)
      error(['File not found or type not recognized (leave ''format'' empty to allow IMREAD to be called).']')
   end
   try
      disp('try imread...');
      [image_out,map] = imread(filename);
   catch
      error('File not found or type not recognized.')
   end
   if ~isempty(map)
      map = single(map*255);
      map = joinchannels('RGB',map(:,1),map(:,2),map(:,3));
      map = colorspace(map,'grey');
      image_out = lut(image_out,map);
   elseif ndims(image_out)==3
      if isa(image_out,'double')
         image_out = image_out*255;
      end
      image_out = dip_image(image_out);
      image_out = joinchannels('RGB',image_out);
      image_out = colorspace(image_out,'grey');
   else
      image_out = dip_image(image_out);
   end
end


   
