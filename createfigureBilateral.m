function createfigureBilateral(paxis, eaxis, fittedR, fittedL, db)
%% CREATEFIGURE(paxisR,eaxisR,paxisL,eaxisL,fittedR,fittedL)
%  paxis:    paxis right is 1:length/2
%  eaxis:    eaxis right
%  fitted*:  cfit objects

%  Auto-generated by MATLAB on 05-Jun-2011 02:35:13
import mlfourd.* mlfsl.* mlpublish.*;
maxX      = ceil(1.1*max(paxis));
regressX  = 0:maxX/10:maxX;
regressYR = feval(fittedR, regressX);
regressYL = feval(fittedL, regressX);

assert(length(paxis) == length(eaxis), 'createfigureBilateral:  unequal lengths for PET->%i, EP2D->%i\n', ...
                                                                length(paxis), length(eaxis));
assert(0 == mod(length(paxis),2),      'createfigureBilateral:  requires even length for PET->%i\n', ...
                                                                length(paxis));
[paxisR,paxisL] = FnirtBuilder.splitAxis(paxis);
[eaxisR,eaxisL] = FnirtBuilder.splitAxis(eaxis);



% Create figure
figure1 = figure('XVisual','','Renderer','painters','Name',[db.pnum ' bilateral'],'InvertHardcopy','off','Color',[1 1 1],...
                 'Position',[1 1 860 560]);

% Create axes
axes1 = axes('Parent',figure1,'Position',[0.17 0.176610978520286 0.7 0.7],'LineWidth',1,'FontWeight','bold','FontSize',16,...
    'FontAngle','italic');
% Uncomment the following line to preserve the X-limits of the axes
% xlim(axes1,[0 70]);
% Uncomment the following line to preserve the Y-limits of the axes
% ylim(axes1,[0 70]);
ylim(axes1,[0 ceil(1.1*max(eaxis))]);
box(axes1,'on');
hold(axes1,'all');

% Create line
line(paxisR,eaxisR,'Parent',axes1,'MarkerEdgeColor',[0 0 0],'MarkerSize',15,'Marker','o','LineWidth',2,'LineStyle','none',...
    'DisplayName','left hemisphere');

% Create line
line(paxisL,eaxisL,'Parent',axes1,'MarkerEdgeColor',[0.501960813999176 0.501960813999176 0.501960813999176],'MarkerSize',15,...
    'Marker','square',...
    'LineWidth',2,...
    'LineStyle','none',...
    'Color',[0.501960813999176 0.501960813999176 0.501960813999176],...
    'DisplayName','right hemisphere');

% Create line
line(regressX,regressYR,'Parent',axes1,'LineWidth',2,'LineStyle','--','Color',[0.501960813999176 0.501960813999176 0.501960813999176],...
    'DisplayName','regression');

% Create line
line(regressX,regressYL,'Parent',axes1,'LineWidth',2,'Color',[0 0 0],'DisplayName','regression');

% Create xlabel
xlabel({'Perm.-corrected PET CBF / (mL/min/100 g)',''},'FontWeight','bold','FontSize',20,'FontAngle','normal');

% Create ylabel
ylabel({'Bookends MR qCBF / (mL/min/100 g)',''},       'FontWeight','bold','FontSize',20,'FontAngle','normal');

% Create title
pnum = mlfsl.ImagingComponent.ensurePnum(pwd);
title([pnum ', mean of ROIs'],                          'FontWeight','bold','FontSize',20,'FontAngle','normal');

% Create legend
legend1 = legend(axes1,'show');
set(legend1,'Interpreter','none','EdgeColor',[1 1 1],'Location','NorthEastOutside','YColor',[1 1 1],'XColor',[1 1 1],...
    'LineWidth',1,'FontSize',14);

% Print figure
ScatterPublisher.printFigure(gcf, ScatterProperties('createfigureBilateral'));
